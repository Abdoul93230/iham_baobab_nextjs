// Service pour la gestion de l'authentification
export class AuthService {
  private static readonly TOKEN_KEY = 'userToken';
  private static readonly USER_KEY = 'userEcomme';

  // Sauvegarder le token
  static saveToken(token: string): void {
    if (typeof window === 'undefined') return;
    try {
      localStorage.setItem(this.TOKEN_KEY, token);
    } catch (error) {
      console.error('Erreur lors de la sauvegarde du token:', error);
    }
  }

  // R√©cup√©rer le token
  static getToken(): string | null {
    if (typeof window === 'undefined') return null;
    try {
      return localStorage.getItem(this.TOKEN_KEY);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du token:', error);
      return null;
    }
  }

  // Supprimer le token
  static removeToken(): void {
    if (typeof window === 'undefined') return;
    try {
      localStorage.removeItem(this.TOKEN_KEY);
    } catch (error) {
      console.error('Erreur lors de la suppression du token:', error);
    }
  }

  // V√©rifier si le token est expir√©
  static isTokenExpired(token: string): boolean {
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const currentTime = Date.now() / 1000;
      return payload.exp < currentTime;
    } catch (error) {
      console.error('Erreur lors de la v√©rification du token:', error);
      return true;
    }
  }

  // V√©rifier si l'utilisateur est authentifi√©
  static isAuthenticated(): boolean {
    const token = this.getToken();
    if (!token) return false;
    
    if (this.isTokenExpired(token)) {
      this.removeToken();
      this.removeUserData();
      return false;
    }
    
    return true;
  }

  // Sauvegarder les donn√©es utilisateur
  static saveUserData(userData: any): void {
    if (typeof window === 'undefined') return;
    try {
      localStorage.setItem(this.USER_KEY, JSON.stringify(userData));
    } catch (error) {
      console.error('Erreur lors de la sauvegarde des donn√©es utilisateur:', error);
    }
  }

  // R√©cup√©rer les donn√©es utilisateur
  static getUserData(): any | null {
    if (typeof window === 'undefined') return null;
    try {
      const userData = localStorage.getItem(this.USER_KEY);
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des donn√©es utilisateur:', error);
      return null;
    }
  }

  // Supprimer les donn√©es utilisateur
  static removeUserData(): void {
    if (typeof window === 'undefined') return;
    try {
      localStorage.removeItem(this.USER_KEY);
    } catch (error) {
      console.error('Erreur lors de la suppression des donn√©es utilisateur:', error);
    }
  }

  // D√©connexion compl√®te
  static logout(): void {
    this.removeToken();
    this.removeUserData();
    localStorage.removeItem('orderTotal');
    localStorage.removeItem('pendingOrder');
    localStorage.removeItem('cartItems');
  }

  // V√©rifier le token aupr√®s du serveur
  static async verifyTokenWithServer(): Promise<boolean> {
    const token = this.getToken();
    if (!token) {
      console.log("‚ùå Aucun token √† v√©rifier");
      return false;
    }

    try {
      console.log("üîç V√©rification du token aupr√®s du serveur...");
      
      const response = await fetch('https://secoure.onrender.com/verify', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        credentials: 'include',
      });

      if (response.ok) {
        console.log("‚úÖ Token valid√© par le serveur");
        return true;
      } else {
        console.log("‚ùå Token rejet√© par le serveur, d√©connexion...");
        this.logout();
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification du token:', error);
      // En cas d'erreur r√©seau, on garde l'utilisateur connect√© s'il a un token valide localement
      if (!this.isTokenExpired(token)) {
        console.log("‚ö†Ô∏è Erreur r√©seau, mais token local valide - utilisateur reste connect√©");
        return true;
      }
      return false;
    }
  }
}
